#!/usr/bin/env bash

cat <<EOF > MapOp.java
package hyperclient;

import java.util.*;

abstract class MapOp
{
    protected HyperClient client;

    public MapOp(HyperClient client)
    {
        this.client = client;
    }

    abstract long call(Object space, Object key,
              hyperclient_map_attribute attrs, long attrs_sz,
              SWIGTYPE_p_hyperclient_returncode rc_ptr) throws TypeError;
}
EOF

cat <<EOF > SimpleOp.java
package hyperclient;

import java.util.*;

abstract class SimpleOp
{
    protected HyperClient client;

    public SimpleOp(HyperClient client)
    {
        this.client = client;
    }

    abstract long call(Object space, Object key,
              hyperclient_attribute attrs, long attrs_sz,
              SWIGTYPE_p_hyperclient_returncode rc_ptr) throws TypeError;
}
EOF

echo "
  // Asynchronous methods
  //
  public Deferred async_get(Object space, Object key) throws HyperClientException,
                                                             TypeError,
                                                             ValueError
  {
    return new DeferredGet(this,space, key);
  }

  public Deferred async_condput(Object space, Object key, java.util.Map condition,
                                                          java.util.Map value)
                                                            throws HyperClientException,
                                                            TypeError,
                                                            MemoryError,
                                                            ValueError
  {
    return new DeferredCondPut(this, space, key, condition, value);
  }

  public Deferred async_del(Object space, Object key) throws HyperClientException,
                                                             TypeError
  {
    return new DeferredDelete(this, space, key);
  }

  public Deferred async_group_del(Object space, java.util.Map predicate)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    return new DeferredGroupDel(this, space, predicate);
  }

  public Deferred async_count(Object space, java.util.Map predicate)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    return async_count(space, predicate, false);
  }

  public Deferred async_count(Object space, java.util.Map predicate, boolean unsafe)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    return new DeferredCount(this, space, predicate, unsafe);
  }
" > async_methods.java

echo "
  // Synchronous methods
  //
  public java.util.Map get(Object space, Object key) throws HyperClientException,
                                                            TypeError,
                                                            ValueError
  {
    DeferredGet d = (DeferredGet)(async_get(space, key));
    return (java.util.Map)(d.waitFor());
  }

  public boolean condput(Object space, Object key, java.util.Map condition,
                                                   java.util.Map value)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    Deferred d = (DeferredCondPut)(async_condput(space, key, condition, value));
    return ((Boolean)(d.waitFor())).booleanValue();
  }

  public boolean del(Object space, Object key) throws HyperClientException,
                                                      TypeError,
                                                      ValueError
  {
    Deferred d = (DeferredDelete)(async_del(space, key));
    return ((Boolean)(d.waitFor())).booleanValue();
  }

  public boolean group_del(Object space, java.util.Map predicate)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    Deferred d = (DeferredGroupDel)(async_group_del(space, predicate));
    return ((Boolean)(d.waitFor())).booleanValue();
  }

  public java.math.BigInteger count(Object space, java.util.Map predicate)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    return count(space, predicate, false);
  }

  public java.math.BigInteger count(Object space, java.util.Map predicate, boolean unsafe)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    Deferred d = (DeferredCount)(async_count(space, predicate, unsafe));
    return (java.math.BigInteger)(d.waitFor());
  }

  public Search search(Object space, java.util.Map predicate)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    return new Search(this,space,predicate);
  }

  public SortedSearch sorted_search(Object space, java.util.Map predicate,
                                                            Object sortBy,
                                                            java.math.BigInteger limit,
                                                            boolean descending)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    return new SortedSearch(this, space, predicate, sortBy, limit, descending);
  }

  public SortedSearch sorted_search(Object space, java.util.Map predicate,
                                                            Object sortBy,
                                                            long limit,
                                                            boolean descending)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    return new SortedSearch(this, space, predicate, sortBy,
                          new java.math.BigInteger(
                            java.nio.ByteBuffer.allocate(8).order(
                                java.nio.ByteOrder.BIG_ENDIAN).putLong(limit).array()),
                                                                            descending);
  }

  public SortedSearch sorted_search(Object space, java.util.Map predicate,
                                                            Object sortBy,
                                                            int limit,
                                                            boolean descending)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   ValueError,
                                                                   MemoryError
  {
    return new SortedSearch(this, space, predicate, sortBy,
                          new java.math.BigInteger(
                            java.nio.ByteBuffer.allocate(4).order(
                                java.nio.ByteOrder.BIG_ENDIAN).putInt(limit).array()),
                                                                            descending);
  }
" > sync_methods.java

for name in $* ; do

    name=`echo $name |sed 's/^async_//'` # Clean name up

    if echo $name |egrep '^map_' > /dev/null 2>&1 ; then
        trname=`echo $name |sed 's/^map_//'` # The name I will camelize
        template="MapOp.template.java"
        prefix="Map"
        deferred="DeferredMapOp"
    else
        trname=$name
        template="SimpleOp.template.java"
        prefix="Simple"
        deferred="DeferredFromAttrs"
    fi


    OLD_IFS=$IFS
    IFS=_

    camel_name=$(for l in $trname; do B=`echo "${l:0:1}" | tr a-z A-Z`${l:1}; echo -n "$B"; done)

    IFS=$OLD_IFS

    cat $template |sed "s/__NAME__/$name/" \
                  |sed "s/__CAMEL_NAME__/$camel_name/" \
                    >> ${prefix}Op.java

    if [[ $name == "put_if_not_exist" ]]; then
        async_body="DeferredFromAttrs d
        = new ${deferred}(this, new ${prefix}Op${camel_name}(this), space, key, map);
    d.setComparing();
    return d;
" 
    else
        async_body="return new ${deferred}(this, new ${prefix}Op${camel_name}(this), space, key, map);"
    fi

    cat <<EOF >> async_methods.java

  public Deferred async_${name}(Object space, Object key, java.util.Map map)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    $async_body
  }
EOF

    cat <<EOF >> sync_methods.java

  public boolean ${name}(Object space, Object key, java.util.Map map)
                                                            throws HyperClientException,
                                                                   TypeError,
                                                                   MemoryError,
                                                                   ValueError
  {
    Deferred d = ($deferred)(async_${name}(space, key, map));
    return ((Boolean)(d.waitFor())).booleanValue();
  }
EOF
done
